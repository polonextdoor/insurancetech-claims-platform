spring:
  application:
    name: insurancetech-claims-platform

  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/insurancetech
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000

  # JPA/Hibernate Configuration
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate  # use 'validate' in production, 'update' for dev
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  # File Upload Configuration
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 15MB

  # Logging
  output:
    ansi:
      enabled: always

# Server Configuration
server:
  port: 8080
  error:
    include-message: always
    include-binding-errors: always
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain

# Application Custom Properties
app:
  # JWT Configuration
  jwt:
    secret: ${JWT_SECRET:your-256-bit-secret-key-change-this-in-production}
    expiration-ms: 86400000  # 24 hours
    refresh-expiration-ms: 604800000  # 7 days

  # AWS Configuration
  aws:
    region: ${AWS_REGION:us-east-1}
    s3:
      bucket: ${AWS_S3_BUCKET:insurancetech-documents}
      access-key: ${AWS_ACCESS_KEY_ID:}
      secret-key: ${AWS_SECRET_ACCESS_KEY:}

  # Risk Assessment Thresholds
  risk:
    high-amount-threshold: 10000.00
    critical-amount-threshold: 50000.00
    multiple-claims-threshold: 3
    multiple-claims-days: 30

  # Fraud Detection Configuration
  fraud:
    score-threshold: 75.0
    auto-flag-threshold: 90.0

# Logging Configuration
logging:
  level:
    root: INFO
    com.insurancetech: DEBUG
    org.springframework.web: INFO
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/application.log
    max-size: 10MB
    max-history: 30

# Actuator Configuration (for monitoring)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# Swagger/OpenAPI Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
  show-actuator: true

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

logging:
  level:
    root: WARN
    com.insurancetech: INFO

server:
  error:
    include-message: never
    include-binding-errors: never
